"use strict";
/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("./page-markdown.component.css.shim.ngstyle");
var i1 = require("@angular/core");
var i2 = require("../../../../../../src/app/page/page-markdown/page-markdown.component");
var styles_PageMarkdownComponent = [i0.styles];
exports.RenderType_PageMarkdownComponent = i1.ɵcrt({ encapsulation: 0,
    styles: styles_PageMarkdownComponent, data: {} });
function View_PageMarkdownComponent_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 6, 'div', [['class',
                'page-markdown']], null, null, null, null, null)),
        (_l()(), i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵeld(2, 0, null, null, 1, 'h2', [], null, null, null, null, null)), (_l()(), i1.ɵted(3, null, ['', ''])),
        (_l()(), i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵeld(5, 0, null, null, 0, 'div', [], [[8, 'innerHTML', 1]], null, null, null, null)), (_l()(), i1.ɵted(-1, null, ['\n'])),
        (_l()(), i1.ɵted(-1, null, ['\n']))], null, function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.content['title'];
        _ck(_v, 3, 0, currVal_0);
        var currVal_1 = _co.toMarkdown(_co.content['content']);
        _ck(_v, 5, 0, currVal_1);
    });
}
exports.View_PageMarkdownComponent_0 = View_PageMarkdownComponent_0;
function View_PageMarkdownComponent_Host_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, 'page-markdown', [], null, null, null, View_PageMarkdownComponent_0, exports.RenderType_PageMarkdownComponent)), i1.ɵdid(1, 49152, null, 0, i2.PageMarkdownComponent, [], null, null)], null, null);
}
exports.View_PageMarkdownComponent_Host_0 = View_PageMarkdownComponent_Host_0;
exports.PageMarkdownComponentNgFactory = i1.ɵccf('page-markdown', i2.PageMarkdownComponent, View_PageMarkdownComponent_Host_0, { content: 'content' }, {}, []);
//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL3BhZ2UvcGFnZS1tYXJrZG93bi9wYWdlLW1hcmtkb3duLmNvbXBvbmVudC5uZ2ZhY3RvcnkudHMiLCJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZzovLy9ob21lL2JsdWViZWFyZC9mbGF0bGFuZGNodXJjaC5jb20vc3JjL2FwcC9wYWdlL3BhZ2UtbWFya2Rvd24vcGFnZS1tYXJrZG93bi5jb21wb25lbnQudHMiLCJuZzovLy9ob21lL2JsdWViZWFyZC9mbGF0bGFuZGNodXJjaC5jb20vc3JjL2FwcC9wYWdlL3BhZ2UtbWFya2Rvd24vcGFnZS1tYXJrZG93bi5jb21wb25lbnQuaHRtbCIsIm5nOi8vL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL3BhZ2UvcGFnZS1tYXJrZG93bi9wYWdlLW1hcmtkb3duLmNvbXBvbmVudC50cy5QYWdlTWFya2Rvd25Db21wb25lbnRfSG9zdC5odG1sIl0sInNvdXJjZXNDb250ZW50IjpbIiAiLCI8ZGl2IGNsYXNzPVwicGFnZS1tYXJrZG93blwiPlxuXHQ8aDI+e3sgY29udGVudFsndGl0bGUnXSB9fTwvaDI+XG5cdDxkaXYgW2lubmVySHRtbF09XCJ0b01hcmtkb3duKGNvbnRlbnRbJ2NvbnRlbnQnXSlcIj48L2Rpdj5cbjwvZGl2PlxuIiwiPHBhZ2UtbWFya2Rvd24+PC9wYWdlLW1hcmtkb3duPiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztvQkNBQTtNQUFBO01BQTJCLDJDQUMxQjtVQUFBO1VBQUEsOEJBQUk7TUFBMkIsMkNBQy9CO1VBQUE7VUFBQSw4QkFBd0Q7TUFDbkQ7O0lBRkQ7SUFBQTtJQUNDO0lBQUwsV0FBSyxTQUFMOzs7O29CQ0ZEO01BQUE7c0NBQUEsVUFBQTtNQUFBOzs7OyJ9
//# sourceMappingURL=data:application/json;charset=utf-8;base64,