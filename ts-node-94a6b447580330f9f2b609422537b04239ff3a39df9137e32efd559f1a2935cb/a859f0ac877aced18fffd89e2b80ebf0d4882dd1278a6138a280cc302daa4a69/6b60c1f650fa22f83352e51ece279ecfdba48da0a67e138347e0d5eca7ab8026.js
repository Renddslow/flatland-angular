"use strict";
/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("./app.component.css.shim.ngstyle");
var i1 = require("@angular/core");
var i2 = require("./header/header.component.ngfactory");
var i3 = require("../../../../src/app/header/header.component");
var i4 = require("@angular/router");
var i5 = require("./footer/footer.component.ngfactory");
var i6 = require("../../../../src/app/footer/footer.component");
var i7 = require("../../../../src/app/app.component");
var styles_AppComponent = [i0.styles];
exports.RenderType_AppComponent = i1.ɵcrt({ encapsulation: 0, styles: styles_AppComponent,
    data: {} });
function View_AppComponent_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, 'app-header', [], null, null, null, i2.View_HeaderComponent_0, i2.RenderType_HeaderComponent)), i1.ɵdid(1, 114688, null, 0, i3.HeaderComponent, [], null, null), (_l()(), i1.ɵted(-1, null, ['\n'])), (_l()(), i1.ɵeld(3, 0, null, null, 4, 'div', [['class', 'content-wrapper']], null, null, null, null, null)), (_l()(),
            i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵeld(5, 16777216, null, null, 1, 'router-outlet', [], null, null, null, null, null)), i1.ɵdid(6, 212992, null, 0, i4.RouterOutlet, [i4.ChildrenOutletContexts, i1.ViewContainerRef, i1.ComponentFactoryResolver, [8,
                null], i1.ChangeDetectorRef], null, null), (_l()(),
            i1.ɵted(-1, null, ['\n'])), (_l()(), i1.ɵted(-1, null, ['\n'])),
        (_l()(), i1.ɵeld(9, 0, null, null, 1, 'app-footer', [], null, null, null, i5.View_FooterComponent_0, i5.RenderType_FooterComponent)),
        i1.ɵdid(10, 114688, null, 0, i6.FooterComponent, [], null, null), (_l()(), i1.ɵted(-1, null, ['\n']))], function (_ck, _v) {
        _ck(_v, 1, 0);
        _ck(_v, 6, 0);
        _ck(_v, 10, 0);
    }, null);
}
exports.View_AppComponent_0 = View_AppComponent_0;
function View_AppComponent_Host_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, 'app-root', [], null, null, null, View_AppComponent_0, exports.RenderType_AppComponent)),
        i1.ɵdid(1, 49152, null, 0, i7.AppComponent, [], null, null)], null, null);
}
exports.View_AppComponent_Host_0 = View_AppComponent_Host_0;
exports.AppComponentNgFactory = i1.ɵccf('app-root', i7.AppComponent, View_AppComponent_Host_0, {}, {}, []);
//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL2FwcC5jb21wb25lbnQubmdmYWN0b3J5LnRzIiwidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmc6Ly8vaG9tZS9ibHVlYmVhcmQvZmxhdGxhbmRjaHVyY2guY29tL3NyYy9hcHAvYXBwLmNvbXBvbmVudC50cyIsIm5nOi8vL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL2FwcC5jb21wb25lbnQuaHRtbCIsIm5nOi8vL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL2FwcC5jb21wb25lbnQudHMuQXBwQ29tcG9uZW50X0hvc3QuaHRtbCJdLCJzb3VyY2VzQ29udGVudCI6WyIgIiwiPGFwcC1oZWFkZXI+PC9hcHAtaGVhZGVyPlxuPGRpdiBjbGFzcz1cImNvbnRlbnQtd3JhcHBlclwiPlxuXHQ8cm91dGVyLW91dGxldD48L3JvdXRlci1vdXRsZXQ+XG48L2Rpdj5cbjxhcHAtZm9vdGVyPjwvYXBwLWZvb3Rlcj5cbiIsIjxhcHAtcm9vdD48L2FwcC1yb290PiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQ0FBO01BQUE7bUNBQUEsVUFBQTtNQUFBLDJDQUF5QjtNQUFBLFNBQ3pCO01BQUEsd0VBQTZCO2FBQUEsNEJBQzVCO01BQUE7TUFBQSxxQ0FBQTtNQUFBO1VBQUEsa0VBQStCO2FBQUEsMkJBQzFCO01BQ047VUFBQTthQUFBO1VBQUEsZUFBeUI7SUFKekI7SUFFQztJQUVEOzs7O29CQ0pBO01BQUE7YUFBQTtVQUFBOzs7In0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,