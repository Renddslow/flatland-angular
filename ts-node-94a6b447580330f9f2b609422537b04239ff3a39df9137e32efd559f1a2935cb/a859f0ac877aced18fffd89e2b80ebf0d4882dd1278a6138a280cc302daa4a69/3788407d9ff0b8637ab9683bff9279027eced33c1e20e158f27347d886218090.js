"use strict";
/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("./header.component.css.shim.ngstyle");
var i1 = require("@angular/core");
var i2 = require("./header-login/header-login.component.ngfactory");
var i3 = require("../../../../../src/app/header/header-login/header-login.component");
var i4 = require("./header-logo/header-logo.component.ngfactory");
var i5 = require("../../../../../src/app/header/header-logo/header-logo.component");
var i6 = require("./header-nav/header-nav.component.ngfactory");
var i7 = require("../../../../../src/app/header/header-nav/header-nav.component");
var i8 = require("./header-mobile-hamburger/header-mobile-hamburger.component.ngfactory");
var i9 = require("../../../../../src/app/header/header-mobile-hamburger/header-mobile-hamburger.component");
var i10 = require("./header-mobile-menu/header-mobile-menu.component.ngfactory");
var i11 = require("../../../../../src/app/header/header-mobile-menu/header-mobile-menu.component");
var i12 = require("../../../../../src/app/header/header.component");
var styles_HeaderComponent = [i0.styles];
exports.RenderType_HeaderComponent = i1.ɵcrt({ encapsulation: 0,
    styles: styles_HeaderComponent, data: {} });
function View_HeaderComponent_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, 'header-login', [], null, null, null, i2.View_HeaderLoginComponent_0, i2.RenderType_HeaderLoginComponent)), i1.ɵdid(1, 49152, null, 0, i3.HeaderLoginComponent, [], { loginLinks: [0, 'loginLinks'] }, null), (_l()(), i1.ɵted(-1, null, ['\n'])), (_l()(), i1.ɵeld(3, 0, null, null, 15, 'header', [], null, null, null, null, null)),
        (_l()(), i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵeld(5, 0, null, null, 1, 'header-logo', [], null, null, null, i4.View_HeaderLogoComponent_0, i4.RenderType_HeaderLogoComponent)),
        i1.ɵdid(6, 49152, null, 0, i5.HeaderLogoComponent, [], null, null), (_l()(), i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵeld(8, 0, null, null, 1, 'header-nav', [], null, null, null, i6.View_HeaderNavComponent_0, i6.RenderType_HeaderNavComponent)),
        i1.ɵdid(9, 49152, null, 0, i7.HeaderNavComponent, [], { navigation: [0,
                'navigation'] }, null), (_l()(), i1.ɵted(-1, null, ['\n	'])),
        (_l()(), i1.ɵeld(11, 0, null, null, 0, 'input', [['id', 'menu-toggle'],
            ['type', 'checkbox']], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵeld(13, 0, null, null, 1, 'header-mobile-hamburger', [], null, null, null, i8.View_HeaderMobileHamburgerComponent_0, i8.RenderType_HeaderMobileHamburgerComponent)), i1.ɵdid(14, 49152, null, 0, i9.HeaderMobileHamburgerComponent, [], null, null),
        (_l()(), i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵeld(16, 0, null, null, 1, 'header-mobile-menu', [], null, null, null, i10.View_HeaderMobileMenuComponent_0, i10.RenderType_HeaderMobileMenuComponent)),
        i1.ɵdid(17, 49152, null, 0, i11.HeaderMobileMenuComponent, [], { navigation: [0, 'navigation'] }, null), (_l()(), i1.ɵted(-1, null, ['\n'])), (_l()(), i1.ɵted(-1, null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.navigation.login;
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = _co.navigation.navItems;
        _ck(_v, 9, 0, currVal_1);
        var currVal_2 = _co.navigation.navItems;
        _ck(_v, 17, 0, currVal_2);
    }, null);
}
exports.View_HeaderComponent_0 = View_HeaderComponent_0;
function View_HeaderComponent_Host_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, 'app-header', [], null, null, null, View_HeaderComponent_0, exports.RenderType_HeaderComponent)), i1.ɵdid(1, 114688, null, 0, i12.HeaderComponent, [], null, null)], function (_ck, _v) {
        _ck(_v, 1, 0);
    }, null);
}
exports.View_HeaderComponent_Host_0 = View_HeaderComponent_Host_0;
exports.HeaderComponentNgFactory = i1.ɵccf('app-header', i12.HeaderComponent, View_HeaderComponent_Host_0, {}, {}, []);
//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL2hlYWRlci9oZWFkZXIuY29tcG9uZW50Lm5nZmFjdG9yeS50cyIsInZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5nOi8vL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LnRzIiwibmc6Ly8vaG9tZS9ibHVlYmVhcmQvZmxhdGxhbmRjaHVyY2guY29tL3NyYy9hcHAvaGVhZGVyL2hlYWRlci5jb21wb25lbnQuaHRtbCIsIm5nOi8vL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LnRzLkhlYWRlckNvbXBvbmVudF9Ib3N0Lmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiICIsIjxoZWFkZXItbG9naW4gW2xvZ2luTGlua3NdPVwibmF2aWdhdGlvbi5sb2dpblwiPjwvaGVhZGVyLWxvZ2luPlxuPGhlYWRlcj5cblx0PGhlYWRlci1sb2dvPjwvaGVhZGVyLWxvZ28+XG5cdDxoZWFkZXItbmF2IFtuYXZpZ2F0aW9uXT1cIm5hdmlnYXRpb24ubmF2SXRlbXNcIj48L2hlYWRlci1uYXY+XG5cdDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIm1lbnUtdG9nZ2xlXCI+XG5cdDxoZWFkZXItbW9iaWxlLWhhbWJ1cmdlcj48L2hlYWRlci1tb2JpbGUtaGFtYnVyZ2VyPlxuXHQ8aGVhZGVyLW1vYmlsZS1tZW51IFtuYXZpZ2F0aW9uXT1cIm5hdmlnYXRpb24ubmF2SXRlbXNcIj48L2hlYWRlci1tb2JpbGUtbWVudT5cbjwvaGVhZGVyPlxuIiwiPGFwcC1oZWFkZXI+PC9hcHAtaGVhZGVyPiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JDQUE7TUFBQTt3Q0FBQSxVQUFBO01BQUEsMkRBQTZEO01BQUEsdUJBQzdEO01BQUE7TUFBUSwyQ0FDUDtVQUFBO1VBQUE7YUFBQTtVQUFBLGVBQTJCLDJDQUMzQjtVQUFBO1VBQUE7YUFBQTtVQUFBLDhCQUE0RDtNQUM1RDtVQUFBO1VBQUEsZ0JBQXdDLDJDQUN4QztVQUFBO1VBQUE7c0RBQUEsVUFBQTtVQUFBO01BQW1ELDJDQUNuRDtVQUFBO1VBQUE7YUFBQTtVQUFBLDZDQUE0RTtVQUFBLFNBQ3BFOztJQVBLO0lBQWQsV0FBYyxTQUFkO0lBR2E7SUFBWixXQUFZLFNBQVo7SUFHb0I7SUFBcEIsWUFBb0IsU0FBcEI7Ozs7b0JDTkQ7TUFBQTtnQ0FBQSxVQUFBO01BQUE7SUFBQTs7OzsifQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,