"use strict";
/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("./footer-nav.component.css.shim.ngstyle");
var i1 = require("@angular/core");
var i2 = require("@angular/router");
var i3 = require("@angular/common");
var i4 = require("../../../../../../src/app/footer/footer-nav/footer-nav.component");
var styles_FooterNavComponent = [i0.styles];
exports.RenderType_FooterNavComponent = i1.ɵcrt({ encapsulation: 0,
    styles: styles_FooterNavComponent, data: {} });
function View_FooterNavComponent_1(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 4, 'li', [], null, null, null, null, null)), (_l()(),
            i1.ɵeld(1, 0, null, null, 3, 'a', [], [[1, 'target', 0],
                [8, 'href', 4]], [[null, 'click']], function (_v, en, $event) {
                var ad = true;
                if (('click' === en)) {
                    var pd_0 = (i1.ɵnov(_v, 2).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)), i1.ɵdid(2, 671744, null, 0, i2.RouterLinkWithHref, [i2.Router, i2.ActivatedRoute, i3.LocationStrategy], { routerLink: [0, 'routerLink'] }, null), i1.ɵpad(3, 1), (_l()(), i1.ɵted(4, null, ['', '']))], function (_ck, _v) {
        var currVal_2 = _ck(_v, 3, 0, _v.context.$implicit.uri);
        _ck(_v, 2, 0, currVal_2);
    }, function (_ck, _v) {
        var currVal_0 = i1.ɵnov(_v, 2).target;
        var currVal_1 = i1.ɵnov(_v, 2).href;
        _ck(_v, 1, 0, currVal_0, currVal_1);
        var currVal_3 = _v.context.$implicit.label;
        _ck(_v, 4, 0, currVal_3);
    });
}
function View_FooterNavComponent_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 7, 'div', [['class',
                'footer-nav']], null, null, null, null, null)),
        (_l()(), i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵeld(2, 0, null, null, 4, 'ul', [], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, ['\n		'])),
        (_l()(), i1.ɵand(16777216, null, null, 1, null, View_FooterNavComponent_1)),
        i1.ɵdid(5, 802816, null, 0, i3.NgForOf, [i1.ViewContainerRef, i1.TemplateRef,
            i1.IterableDiffers], { ngForOf: [0, 'ngForOf'] }, null), (_l()(), i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵted(-1, null, ['\n'])), (_l()(),
            i1.ɵted(-1, null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.navigation;
        _ck(_v, 5, 0, currVal_0);
    }, null);
}
exports.View_FooterNavComponent_0 = View_FooterNavComponent_0;
function View_FooterNavComponent_Host_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, 'footer-nav', [], null, null, null, View_FooterNavComponent_0, exports.RenderType_FooterNavComponent)), i1.ɵdid(1, 49152, null, 0, i4.FooterNavComponent, [], null, null)], null, null);
}
exports.View_FooterNavComponent_Host_0 = View_FooterNavComponent_Host_0;
exports.FooterNavComponentNgFactory = i1.ɵccf('footer-nav', i4.FooterNavComponent, View_FooterNavComponent_Host_0, { navigation: 'navigation' }, {}, []);
//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL2Zvb3Rlci9mb290ZXItbmF2L2Zvb3Rlci1uYXYuY29tcG9uZW50Lm5nZmFjdG9yeS50cyIsInZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5nOi8vL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL2Zvb3Rlci9mb290ZXItbmF2L2Zvb3Rlci1uYXYuY29tcG9uZW50LnRzIiwibmc6Ly8vaG9tZS9ibHVlYmVhcmQvZmxhdGxhbmRjaHVyY2guY29tL3NyYy9hcHAvZm9vdGVyL2Zvb3Rlci1uYXYvZm9vdGVyLW5hdi5jb21wb25lbnQuaHRtbCIsIm5nOi8vL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL2Zvb3Rlci9mb290ZXItbmF2L2Zvb3Rlci1uYXYuY29tcG9uZW50LnRzLkZvb3Rlck5hdkNvbXBvbmVudF9Ib3N0Lmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiICIsIjxkaXYgY2xhc3M9XCJmb290ZXItbmF2XCI+XG5cdDx1bD5cblx0XHQ8bGkgKm5nRm9yPVwibGV0IG5hdkl0ZW0gb2YgbmF2aWdhdGlvblwiPjxhIFtyb3V0ZXJMaW5rXT1cIltuYXZJdGVtLnVyaV1cIj57eyBuYXZJdGVtLmxhYmVsIH19PC9hPjwvbGk+XG5cdDwvdWw+XG48L2Rpdj5cbiIsIjxmb290ZXItbmF2PjwvZm9vdGVyLW5hdj4iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztvQkNFRTtNQUFBLHdFQUF1QzthQUFBO1VBQUE7UUFBQTtRQUFBO1VBQUE7Y0FBQTtVQUFBO1FBQUE7UUFBQTtNQUFBLHVDQUFBO01BQUE7TUFBQSxzQkFBRyxNQUE2Qjs7SUFBN0I7SUFBSCxXQUFHLFNBQUg7O0lBQUE7SUFBQTtJQUFBLFdBQUEsbUJBQUE7SUFBZ0M7SUFBQTs7OztvQkFGekU7TUFBQTtNQUF3QiwyQ0FDdkI7VUFBQTtVQUFBLDhCQUFJO01BQ0g7YUFBQTs0QkFBQSx5Q0FBbUc7VUFBQSx3QkFDL0YsMENBQ0E7aUJBQUE7O0lBRkE7SUFBSixXQUFJLFNBQUo7Ozs7b0JDRkY7TUFBQTttQ0FBQSxVQUFBO01BQUE7Ozs7In0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,