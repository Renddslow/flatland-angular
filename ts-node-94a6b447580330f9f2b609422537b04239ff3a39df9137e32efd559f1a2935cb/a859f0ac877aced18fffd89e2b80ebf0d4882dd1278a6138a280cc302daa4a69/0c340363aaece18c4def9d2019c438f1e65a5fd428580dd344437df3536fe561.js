"use strict";
/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("./header-login.component.css.shim.ngstyle");
var i1 = require("@angular/core");
var i2 = require("@angular/common");
var i3 = require("../../../../../../src/app/header/header-login/header-login.component");
var styles_HeaderLoginComponent = [i0.styles];
exports.RenderType_HeaderLoginComponent = i1.ɵcrt({ encapsulation: 0,
    styles: styles_HeaderLoginComponent, data: {} });
function View_HeaderLoginComponent_1(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 4, 'li', [], null, null, null, null, null)), (_l()(),
            i1.ɵted(-1, null, ['\n			'])), (_l()(), i1.ɵeld(2, 0, null, null, 1, 'a', [], [[8, 'href', 4]], null, null, null, null)), (_l()(), i1.ɵted(3, null, ['', ''])), (_l()(), i1.ɵted(-1, null, ['\n		']))], null, function (_ck, _v) {
        var currVal_0 = i1.ɵinlineInterpolate(1, '', _v.context.$implicit.uri, '');
        _ck(_v, 2, 0, currVal_0);
        var currVal_1 = _v.context.$implicit.label;
        _ck(_v, 3, 0, currVal_1);
    });
}
function View_HeaderLoginComponent_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 7, 'div', [['class',
                'login-bar']], null, null, null, null, null)),
        (_l()(), i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵeld(2, 0, null, null, 4, 'ul', [], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, ['\n		'])),
        (_l()(), i1.ɵand(16777216, null, null, 1, null, View_HeaderLoginComponent_1)),
        i1.ɵdid(5, 802816, null, 0, i2.NgForOf, [i1.ViewContainerRef, i1.TemplateRef,
            i1.IterableDiffers], { ngForOf: [0, 'ngForOf'] }, null), (_l()(), i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵted(-1, null, ['\n'])), (_l()(),
            i1.ɵted(-1, null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.loginLinks;
        _ck(_v, 5, 0, currVal_0);
    }, null);
}
exports.View_HeaderLoginComponent_0 = View_HeaderLoginComponent_0;
function View_HeaderLoginComponent_Host_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, 'header-login', [], null, null, null, View_HeaderLoginComponent_0, exports.RenderType_HeaderLoginComponent)), i1.ɵdid(1, 49152, null, 0, i3.HeaderLoginComponent, [], null, null)], null, null);
}
exports.View_HeaderLoginComponent_Host_0 = View_HeaderLoginComponent_Host_0;
exports.HeaderLoginComponentNgFactory = i1.ɵccf('header-login', i3.HeaderLoginComponent, View_HeaderLoginComponent_Host_0, { loginLinks: 'loginLinks' }, {}, []);
//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL2hlYWRlci9oZWFkZXItbG9naW4vaGVhZGVyLWxvZ2luLmNvbXBvbmVudC5uZ2ZhY3RvcnkudHMiLCJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZzovLy9ob21lL2JsdWViZWFyZC9mbGF0bGFuZGNodXJjaC5jb20vc3JjL2FwcC9oZWFkZXIvaGVhZGVyLWxvZ2luL2hlYWRlci1sb2dpbi5jb21wb25lbnQudHMiLCJuZzovLy9ob21lL2JsdWViZWFyZC9mbGF0bGFuZGNodXJjaC5jb20vc3JjL2FwcC9oZWFkZXIvaGVhZGVyLWxvZ2luL2hlYWRlci1sb2dpbi5jb21wb25lbnQuaHRtbCIsIm5nOi8vL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL2hlYWRlci9oZWFkZXItbG9naW4vaGVhZGVyLWxvZ2luLmNvbXBvbmVudC50cy5IZWFkZXJMb2dpbkNvbXBvbmVudF9Ib3N0Lmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiICIsIjxkaXYgY2xhc3M9XCJsb2dpbi1iYXJcIj5cblx0PHVsPlxuXHRcdDxsaSAqbmdGb3I9XCJsZXQgbG9naW5CYXJJdGVtIG9mIGxvZ2luTGlua3NcIj5cblx0XHRcdDxhIGhyZWY9XCJ7eyBsb2dpbkJhckl0ZW0udXJpIH19XCI+e3sgbG9naW5CYXJJdGVtLmxhYmVsIH19PC9hPlxuXHRcdDwvbGk+XG5cdDwvdWw+XG48L2Rpdj5cbiIsIjxoZWFkZXItbG9naW4+PC9oZWFkZXItbG9naW4+Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztvQkNFRTtNQUFBLHdFQUE0QzthQUFBLDhCQUMzQztNQUFBO01BQUEsZ0JBQWlDLDBDQUE0QjtNQUFBO0lBQTFEO0lBQUgsV0FBRyxTQUFIO0lBQWlDO0lBQUE7Ozs7b0JBSHBDO01BQUE7TUFBdUIsMkNBQ3RCO1VBQUE7VUFBQSw4QkFBSTtNQUNIO2FBQUE7NEJBQUEseUNBRUs7VUFBQSx3QkFDRCwwQ0FDQTtpQkFBQTs7SUFKQTtJQUFKLFdBQUksU0FBSjs7OztvQkNGRjtNQUFBO3FDQUFBLFVBQUE7TUFBQTs7OzsifQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,