"use strict";
/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("./page-image-stack.component.css.shim.ngstyle");
var i1 = require("@angular/core");
var i2 = require("@angular/router");
var i3 = require("@angular/common");
var i4 = require("../../../../../../src/app/page/page-image-stack/page-image-stack.component");
var styles_PageImageStackComponent = [i0.styles];
exports.RenderType_PageImageStackComponent = i1.ɵcrt({ encapsulation: 0,
    styles: styles_PageImageStackComponent, data: {} });
function View_PageImageStackComponent_2(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 3, 'a', [['class',
                'cta']], [[1, 'target', 0], [8, 'href', 4]], [[null, 'click']], function (_v, en, $event) {
            var ad = true;
            if (('click' === en)) {
                var pd_0 = (i1.ɵnov(_v, 1).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, null, null)), i1.ɵdid(1, 671744, null, 0, i2.RouterLinkWithHref, [i2.Router, i2.ActivatedRoute, i3.LocationStrategy], { routerLink: [0, 'routerLink'] }, null), i1.ɵpad(2, 1), (_l()(), i1.ɵted(3, null, ['', '']))], function (_ck, _v) {
        var currVal_2 = (_ck(_v, 2, 0, '/') + _v.parent.context.$implicit['action']['internalUrl']);
        _ck(_v, 1, 0, currVal_2);
    }, function (_ck, _v) {
        var currVal_0 = i1.ɵnov(_v, 1).target;
        var currVal_1 = i1.ɵnov(_v, 1).href;
        _ck(_v, 0, 0, currVal_0, currVal_1);
        var currVal_3 = _v.parent.context.$implicit['action']['label'];
        _ck(_v, 3, 0, currVal_3);
    });
}
function View_PageImageStackComponent_3(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, 'a', [['class',
                'cta']], [[8, 'href', 4]], null, null, null, null)),
        (_l()(), i1.ɵted(1, null, ['', '']))], null, function (_ck, _v) {
        var currVal_0 = i1.ɵinlineInterpolate(1, '', _v.parent.context.$implicit['action']['externalUrl'], '');
        _ck(_v, 0, 0, currVal_0);
        var currVal_1 = _v.parent.context.$implicit['action']['label'];
        _ck(_v, 1, 0, currVal_1);
    });
}
function View_PageImageStackComponent_1(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 22, 'div', [['class',
                'fc-stack-item']], null, null, null, null, null)),
        (_l()(), i1.ɵted(-1, null, ['\n		'])), (_l()(), i1.ɵeld(2, 0, null, null, 19, 'div', [['class', 'fc-stack-container']], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, ['\n			'])), (_l()(), i1.ɵeld(4, 0, null, null, 2, 'div', [['class',
                'fc-stack-image']], null, null, null, null, null)), i1.ɵdid(5, 278528, null, 0, i3.NgStyle, [i1.KeyValueDiffers,
            i1.ElementRef, i1.Renderer], { ngStyle: [0, 'ngStyle'] }, null), i1.ɵpod(6, { 'background-image': 0 }), (_l()(), i1.ɵted(-1, null, ['\n			'])), (_l()(),
            i1.ɵeld(8, 0, null, null, 12, 'div', [['class', 'fc-stack-text']], null, null, null, null, null)),
        (_l()(), i1.ɵted(-1, null, ['\n				'])), (_l()(), i1.ɵeld(10, 0, null, null, 1, 'h3', [], null, null, null, null, null)), (_l()(), i1.ɵted(11, null, ['', ''])),
        (_l()(), i1.ɵted(-1, null, ['\n				'])), (_l()(), i1.ɵeld(13, 0, null, null, 0, 'div', [], [[8, 'innerHTML', 1]], null, null, null, null)), (_l()(), i1.ɵted(-1, null, ['\n				'])),
        (_l()(), i1.ɵand(16777216, null, null, 1, null, View_PageImageStackComponent_2)),
        i1.ɵdid(16, 16384, null, 0, i3.NgIf, [i1.ViewContainerRef, i1.TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), i1.ɵted(-1, null, ['\n				'])),
        (_l()(), i1.ɵand(16777216, null, null, 1, null, View_PageImageStackComponent_3)),
        i1.ɵdid(19, 16384, null, 0, i3.NgIf, [i1.ViewContainerRef, i1.TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), i1.ɵted(-1, null, ['\n			'])),
        (_l()(), i1.ɵted(-1, null, ['\n		'])), (_l()(), i1.ɵted(-1, null, ['\n	']))], function (_ck, _v) {
        var currVal_0 = _ck(_v, 6, 0, (('url(' + _v.context.$implicit['image']) + ')'));
        _ck(_v, 5, 0, currVal_0);
        var currVal_3 = (_v.context.$implicit['action'] && _v.context.$implicit['action']['internalUrl']);
        _ck(_v, 16, 0, currVal_3);
        var currVal_4 = (_v.context.$implicit['action'] && _v.context.$implicit['action']['externalUrl']);
        _ck(_v, 19, 0, currVal_4);
    }, function (_ck, _v) {
        var _co = _v.component;
        var currVal_1 = _v.context.$implicit['title'];
        _ck(_v, 11, 0, currVal_1);
        var currVal_2 = _co.toMarkdown(_v.context.$implicit['content']);
        _ck(_v, 13, 0, currVal_2);
    });
}
function View_PageImageStackComponent_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 4, 'div', [['class',
                'fc-stack']], null, null, null, null, null)),
        (_l()(), i1.ɵted(-1, null, ['\n	'])), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_PageImageStackComponent_1)), i1.ɵdid(3, 802816, null, 0, i3.NgForOf, [i1.ViewContainerRef, i1.TemplateRef, i1.IterableDiffers], { ngForOf: [0, 'ngForOf'] }, null), (_l()(), i1.ɵted(-1, null, ['\n'])), (_l()(), i1.ɵted(-1, null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.stack;
        _ck(_v, 3, 0, currVal_0);
    }, null);
}
exports.View_PageImageStackComponent_0 = View_PageImageStackComponent_0;
function View_PageImageStackComponent_Host_0(_l) {
    return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, 'page-image-stack', [], null, null, null, View_PageImageStackComponent_0, exports.RenderType_PageImageStackComponent)), i1.ɵdid(1, 49152, null, 0, i4.PageImageStackComponent, [], null, null)], null, null);
}
exports.View_PageImageStackComponent_Host_0 = View_PageImageStackComponent_Host_0;
exports.PageImageStackComponentNgFactory = i1.ɵccf('page-image-stack', i4.PageImageStackComponent, View_PageImageStackComponent_Host_0, { stack: 'stack' }, {}, []);
//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL3BhZ2UvcGFnZS1pbWFnZS1zdGFjay9wYWdlLWltYWdlLXN0YWNrLmNvbXBvbmVudC5uZ2ZhY3RvcnkudHMiLCJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZzovLy9ob21lL2JsdWViZWFyZC9mbGF0bGFuZGNodXJjaC5jb20vc3JjL2FwcC9wYWdlL3BhZ2UtaW1hZ2Utc3RhY2svcGFnZS1pbWFnZS1zdGFjay5jb21wb25lbnQudHMiLCJuZzovLy9ob21lL2JsdWViZWFyZC9mbGF0bGFuZGNodXJjaC5jb20vc3JjL2FwcC9wYWdlL3BhZ2UtaW1hZ2Utc3RhY2svcGFnZS1pbWFnZS1zdGFjay5jb21wb25lbnQuaHRtbCIsIm5nOi8vL2hvbWUvYmx1ZWJlYXJkL2ZsYXRsYW5kY2h1cmNoLmNvbS9zcmMvYXBwL3BhZ2UvcGFnZS1pbWFnZS1zdGFjay9wYWdlLWltYWdlLXN0YWNrLmNvbXBvbmVudC50cy5QYWdlSW1hZ2VTdGFja0NvbXBvbmVudF9Ib3N0Lmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiICIsIjxkaXYgY2xhc3M9XCJmYy1zdGFja1wiPlxuXHQ8ZGl2IGNsYXNzPVwiZmMtc3RhY2staXRlbVwiICpuZ0Zvcj1cImxldCBzdGFja0l0ZW0gb2Ygc3RhY2tcIj5cblx0XHQ8ZGl2IGNsYXNzPVwiZmMtc3RhY2stY29udGFpbmVyXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiZmMtc3RhY2staW1hZ2VcIiBbbmdTdHlsZV09XCJ7J2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCcgKyBzdGFja0l0ZW1bJ2ltYWdlJ10gKyAnKSd9XCI+PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiZmMtc3RhY2stdGV4dFwiPlxuXHRcdFx0XHQ8aDM+e3sgc3RhY2tJdGVtWyd0aXRsZSddIH19PC9oMz5cblx0XHRcdFx0PGRpdiBbaW5uZXJIdG1sXT1cInRvTWFya2Rvd24oc3RhY2tJdGVtWydjb250ZW50J10pXCI+PC9kaXY+XG5cdFx0XHRcdDxhIGNsYXNzPVwiY3RhXCIgKm5nSWY9XCJzdGFja0l0ZW1bJ2FjdGlvbiddICYmIHN0YWNrSXRlbVsnYWN0aW9uJ11bJ2ludGVybmFsVXJsJ11cIiBbcm91dGVyTGlua109XCJbJy8nXSArIHN0YWNrSXRlbVsnYWN0aW9uJ11bJ2ludGVybmFsVXJsJ11cIj57eyBzdGFja0l0ZW1bJ2FjdGlvbiddWydsYWJlbCddIH19PC9hPlxuXHRcdFx0XHQ8YSBjbGFzcz1cImN0YVwiICpuZ0lmPVwic3RhY2tJdGVtWydhY3Rpb24nXSAmJiBzdGFja0l0ZW1bJ2FjdGlvbiddWydleHRlcm5hbFVybCddXCIgaHJlZj1cInt7IHN0YWNrSXRlbVsnYWN0aW9uJ11bJ2V4dGVybmFsVXJsJ10gfX1cIj57eyBzdGFja0l0ZW1bJ2FjdGlvbiddWydsYWJlbCddIH19PC9hPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC9kaXY+XG4iLCI8cGFnZS1pbWFnZS1zdGFjaz48L3BhZ2UtaW1hZ2Utc3RhY2s+Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JDT0k7TUFBQTtJQUFBO0lBQUE7TUFBQTtVQUFBO01BQUE7SUFBQTtJQUFBO0VBQUEsdUNBQUE7TUFBQTtNQUFBLHNCQUFpRixNQUEwRDs7SUFBMUQ7SUFBakYsV0FBaUYsU0FBakY7O0lBQUE7SUFBQTtJQUFBLFdBQUEsbUJBQUE7SUFBMkk7SUFBQTs7OztvQkFDM0k7TUFBQTtNQUFpSTtJQUFoRDtRQUFBO0lBQWpGLFdBQWlGLFNBQWpGO0lBQWlJO0lBQUE7Ozs7b0JBUHBJO01BQUE7TUFBMkQsNENBQzFEO1VBQUE7VUFBQSw0Q0FBZ0M7VUFBQSxZQUMvQjtVQUFBO1VBQUEsdUJBQUE7bUNBQUEsZ0RBQTRCO1VBQUEsd0JBQTBFLDZDQUN0RztpQkFBQTtjQUFBO01BQTJCLDhDQUMxQjtVQUFBO1VBQUEsOEJBQUk7TUFBNkIsOENBQ2pDO1VBQUE7VUFBQSw4QkFBMEQ7TUFDMUQ7YUFBQTtVQUFBLGlDQUFpTDtNQUNqTDthQUFBO1VBQUEsaUNBQXVLO01BQ2xLLDRDQUNEO1VBQUE7SUFQdUI7SUFBNUIsV0FBNEIsU0FBNUI7SUFJZ0I7SUFBZixZQUFlLFNBQWY7SUFDZTtJQUFmLFlBQWUsU0FBZjs7O0lBSEk7SUFBQTtJQUNDO0lBQUwsWUFBSyxTQUFMOzs7O29CQU5KO01BQUE7TUFBc0IsMkNBQ3JCO1VBQUEsc0VBQUE7VUFBQTtVQUFBLHVDQVVNO1VBQUEsU0FDRDs7SUFYc0I7SUFBM0IsV0FBMkIsU0FBM0I7Ozs7b0JDREQ7TUFBQTt3Q0FBQSxVQUFBO01BQUE7Ozs7In0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,